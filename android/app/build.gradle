def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
 keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.ciying"
        // audioplayers pub~~!!!!!!! In order to support the playBytes method, this has a hard requirement on using API >= 23 features, and your build may failure depending on your minimum sdk targeting. To override this, you will need to add <uses-sdk tools:overrideLibrary="xyz.luan.audioplayers"/> to your build.gradle
        minSdkVersion 23
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }
  signingConfigs {
     file(rootProject.file('key.properties')).with { propFile ->
     if (propFile.canRead()) {
     release {
         keyAlias keystoreProperties['keyAlias']
         keyPassword keystoreProperties['keyPassword']
         storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
         storePassword keystoreProperties['storePassword']
              }
         }
         else {
             print('not signed')
         }
     }
 }

buildTypes {
    release {
         file(rootProject.file('key.properties')).with { propFile ->
             if (propFile.canRead()) {
//                  because we can read the keystore
//                  we are building locally
//                  so sign locally
//                  otherwise build an unsigned apk for later signing by the CI/CD provider
                  signingConfig signingConfigs.release
                  minifyEnabled true
                  useProguard true
                  proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
             }
         }

         applicationVariants.all { variant ->
             variant.outputs.all { output ->
                 output.outputFileName = "app-release.apk"
             }
         }
        // TODO: Add your own signing config for the release build.
        // Signing with the debug keys for now, so `flutter run --release` works.
        // signingConfig signingConfigs.release
    }
}

}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
